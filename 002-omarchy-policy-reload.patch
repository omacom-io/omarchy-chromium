diff --git a/chrome/browser/themes/theme_service.cc b/chrome/browser/themes/theme_service.cc
index affa6fd8975d2..2c3b3849a8d02 100644
--- a/chrome/browser/themes/theme_service.cc
+++ b/chrome/browser/themes/theme_service.cc
@@ -16,6 +16,7 @@
 #include "base/files/file_util.h"
 #include "base/functional/bind.h"
 #include "base/location.h"
+#include "base/logging.h"
 #include "base/memory/raw_ptr.h"
 #include "base/memory/ref_counted_memory.h"
 #include "base/metrics/histogram_macros.h"
@@ -25,10 +26,12 @@
 #include "base/strings/string_number_conversions.h"
 #include "base/strings/string_split.h"
 #include "base/strings/string_util.h"
+#include "base/strings/stringprintf.h"
 #include "base/strings/utf_string_conversions.h"
 #include "base/task/sequenced_task_runner.h"
 #include "base/task/single_thread_task_runner.h"
 #include "base/task/thread_pool.h"
+#include "base/time/time.h"
 #include "base/trace_event/trace_event.h"
 #include "build/build_config.h"
 #include "chrome/browser/extensions/extension_service.h"
@@ -556,8 +559,20 @@ SkColor ThemeService::GetAutogeneratedThemeColor() const {
 }
 
 void ThemeService::BuildAutogeneratedPolicyTheme() {
-  BuildAutogeneratedThemeFromColor(GetPolicyThemeColor(),
-                                   /*store_user_prefs*/ false);
+	SkColor policy_color = GetPolicyThemeColor();
+
+  if (VLOG_IS_ON(1)) {
+    base::Time::Exploded now;
+    base::Time::Now().LocalExplode(&now);
+    VLOG(1) << "[THEME_TIMING] Policy theme applied at: "
+            << base::StringPrintf("%02d%02d/%02d%02d%02d.%03d", now.month,
+                                  now.day_of_month, now.hour, now.minute,
+                                  now.second, now.millisecond)
+            << " color=#"
+            << base::StringPrintf("%06X", policy_color & 0xFFFFFF);
+  }
+
+  BuildAutogeneratedThemeFromColor(policy_color, /*store_user_prefs*/ false);
 }
 
 SkColor ThemeService::GetPolicyThemeColor() const {
diff --git a/chrome/browser/ui/startup/startup_browser_creator.cc b/chrome/browser/ui/startup/startup_browser_creator.cc
index f6f46c4dc501f..d31e2021036fa 100644
--- a/chrome/browser/ui/startup/startup_browser_creator.cc
+++ b/chrome/browser/ui/startup/startup_browser_creator.cc
@@ -137,7 +137,10 @@
 #if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_MAC) || BUILDFLAG(IS_WIN)
 #include "chrome/browser/headless/headless_mode_util.h"
 #include "chrome/browser/ui/startup/web_app_info_recorder_utils.h"
+#include "chrome/common/chrome_switches.h"
 #include "components/headless/policy/headless_mode_policy.h"
+#include "components/policy/core/common/policy_service.h"
+#include "components/policy/core/common/policy_types.h"
 #endif
 
 #if !BUILDFLAG(IS_CHROMEOS)
@@ -1485,6 +1488,18 @@ void StartupBrowserCreator::ProcessCommandLineWithProfile(
     LOG(ERROR) << "Failed to load the profile.";
     return;
   }
+
+#if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_MAC) || BUILDFLAG(IS_WIN)
+  // Handle force policy reload for already running instance
+  if (command_line.HasSwitch(switches::kForcePolicyReload)) {
+    if (g_browser_process && g_browser_process->policy_service()) {
+      g_browser_process->policy_service()->RefreshPolicies(
+          base::DoNothing(), policy::PolicyFetchReason::kUserRequest);
+    }
+    return;
+  }
+#endif  // BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_MAC) || BUILDFLAG(IS_WIN)
+
   Profiles last_opened_profiles;
 #if !BUILDFLAG(IS_CHROMEOS)
   // On ChromeOS multiple profiles doesn't apply.
diff --git a/chrome/common/chrome_switches.cc b/chrome/common/chrome_switches.cc
index e398d8d58e9f8..ca97b0142e799 100644
--- a/chrome/common/chrome_switches.cc
+++ b/chrome/common/chrome_switches.cc
@@ -376,6 +376,11 @@ const char kInitIsolateAsForeground[] = "init-isolate-as-foreground";
 // The format is "r,g,b", where r, g, b are a numeric values from 0 to 255.
 const char kInstallAutogeneratedTheme[] = "install-autogenerated-theme";
 
+// Forces an immediate refresh of policy sources. This can be useful for
+// applying policy changes instantly rather than waiting for the next scheduled
+// policy refresh interval.
+const char kForcePolicyReload[] = "refresh-platform-policy";
+
 // Sets the theme color for all running Chrome windows.
 // The format is "r,g,b", where r, g, b are numeric values from 0 to 255.
 const char kSetThemeColor[] = "set-theme-color";
diff --git a/chrome/common/chrome_switches.h b/chrome/common/chrome_switches.h
index 5f844b5479823..b1e1d2ea0460a 100644
--- a/chrome/common/chrome_switches.h
+++ b/chrome/common/chrome_switches.h
@@ -124,6 +124,7 @@ extern const char kHomePage[];
 extern const char kIncognito[];
 extern const char kInitIsolateAsForeground[];
 extern const char kInstallAutogeneratedTheme[];
+extern const char kForcePolicyReload[];
 extern const char kSetThemeColor[];
 extern const char kSetColorScheme[];
 extern const char kSetDefaultTheme[];
