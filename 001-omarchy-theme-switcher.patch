diff --git a/chrome/browser/chrome_browser_main.cc b/chrome/browser/chrome_browser_main.cc
index 03aef97f33..a1c218762f 100644
--- a/chrome/browser/chrome_browser_main.cc
+++ b/chrome/browser/chrome_browser_main.cc
@@ -56,6 +56,8 @@
 #include "chrome/browser/sessions/chrome_serialized_navigation_driver.h"
 #include "chrome/browser/shell_integration.h"
 #include "chrome/browser/startup_data.h"
+#include "chrome/browser/themes/theme_service.h"
+#include "chrome/browser/themes/theme_service_factory.h"
 #include "chrome/browser/translate/chrome_translate_client.h"
 #include "chrome/browser/translate/translate_service.h"
 #include "chrome/browser/ui/actions/chrome_actions.h"
@@ -425,6 +427,47 @@ OSStatus KeychainCallback(SecKeychainEvent keychain_event,
 #endif
 
 #if BUILDFLAG(ENABLE_PROCESS_SINGLETON)
+bool HasOnlyThemeSwitches(const base::CommandLine& command_line) {
+  const base::CommandLine::SwitchMap& switches = command_line.GetSwitches();
+
+  const std::set<std::string> theme_switches = {
+      switches::kSetThemeColor,   switches::kSetColorScheme,
+      switches::kSetDefaultTheme, switches::kSetGrayscaleTheme,
+      switches::kSetUserColor,    switches::kSetColorVariant};
+
+  for (const auto& [switch_name, switch_value] : switches) {
+    if (switch_name == "type") {
+      continue;
+    }
+    if (theme_switches.find(switch_name) == theme_switches.end()) {
+      return false;
+    }
+  }
+
+  return command_line.GetArgs().empty();
+}
+
+void ProcessThemeCommandLineSwitchesForRunningInstance(
+    const base::CommandLine& command_line,
+    const base::FilePath& profile_path) {
+  ProfileManager* profile_manager = g_browser_process->profile_manager();
+  if (!profile_manager) {
+    return;
+  }
+
+  Profile* profile = profile_manager->GetProfileByPath(profile_path);
+  if (!profile) {
+    return;
+  }
+
+  ThemeService* theme_service = ThemeServiceFactory::GetForProfile(profile);
+  if (!theme_service) {
+    return;
+  }
+
+  theme_service->ProcessThemeCommandLineSwitches(&command_line);
+}
+
 void ProcessSingletonNotificationCallbackImpl(
     base::CommandLine command_line,
     const base::FilePath& current_directory) {
@@ -456,6 +499,13 @@ void ProcessSingletonNotificationCallbackImpl(
                             /*ignore_profile_picker=*/false);
   DCHECK_NE(startup_profile_path_info.mode, StartupProfileMode::kError);
 
+
+  ProcessThemeCommandLineSwitchesForRunningInstance(
+      command_line, startup_profile_path_info.path);
+
+  if (HasOnlyThemeSwitches(command_line)) {
+    return;
+  }
   StartupBrowserCreator::ProcessCommandLineAlreadyRunning(
       command_line, current_directory, startup_profile_path_info);
 
diff --git a/chrome/browser/themes/theme_service.cc b/chrome/browser/themes/theme_service.cc
index a4c1cd5010..46edaa8219 100644
--- a/chrome/browser/themes/theme_service.cc
+++ b/chrome/browser/themes/theme_service.cc
@@ -306,6 +306,8 @@ void ThemeService::Init() {
     BuildAutogeneratedThemeFromColor(SkColorSetRGB(r, g, b));
   }
 
+
+  ProcessThemeCommandLineSwitches(command_line);
   pref_change_registrar_.Init(profile_->GetPrefs());
   pref_change_registrar_.Add(
       themes::prefs::kPolicyThemeColor,
@@ -1040,6 +1042,88 @@ bool ThemeService::DisableExtension(const std::string& extension_id) {
   return false;
 }
 
+
+void ThemeService::ProcessThemeCommandLineSwitches(
+    const base::CommandLine* command_line) {
+  if (!command_line || !profile_) {
+    return;
+  }
+
+  if (command_line->HasSwitch(switches::kSetThemeColor)) {
+    std::string value =
+        command_line->GetSwitchValueASCII(switches::kSetThemeColor);
+    std::vector<std::string> rgb = base::SplitString(
+        value, ",", base::TRIM_WHITESPACE, base::SPLIT_WANT_NONEMPTY);
+    if (rgb.size() == 3) {
+      int r, g, b;
+      if (base::StringToInt(rgb[0], &r) && base::StringToInt(rgb[1], &g) &&
+          base::StringToInt(rgb[2], &b) && r >= 0 && r <= 255 && g >= 0 &&
+          g <= 255 && b >= 0 && b <= 255) {
+        BuildAutogeneratedThemeFromColor(SkColorSetRGB(r, g, b));
+      }
+    }
+  }
+
+  if (command_line->HasSwitch(switches::kSetColorScheme)) {
+    std::string scheme =
+        command_line->GetSwitchValueASCII(switches::kSetColorScheme);
+    BrowserColorScheme color_scheme;
+    if (scheme == "system") {
+      color_scheme = BrowserColorScheme::kSystem;
+    } else if (scheme == "light") {
+      color_scheme = BrowserColorScheme::kLight;
+    } else if (scheme == "dark") {
+      color_scheme = BrowserColorScheme::kDark;
+    } else {
+      return;
+    }
+    SetBrowserColorScheme(color_scheme);
+  }
+
+  if (command_line->HasSwitch(switches::kSetDefaultTheme)) {
+    UseDefaultTheme();
+  }
+
+  if (command_line->HasSwitch(switches::kSetGrayscaleTheme)) {
+    std::string value =
+        command_line->GetSwitchValueASCII(switches::kSetGrayscaleTheme);
+    bool is_grayscale = (value == "true");
+    SetIsGrayscale(is_grayscale);
+  }
+
+  if (command_line->HasSwitch(switches::kSetUserColor)) {
+    std::string value =
+        command_line->GetSwitchValueASCII(switches::kSetUserColor);
+    std::vector<std::string> rgb = base::SplitString(
+        value, ",", base::TRIM_WHITESPACE, base::SPLIT_WANT_NONEMPTY);
+    if (rgb.size() == 3) {
+      int r, g, b;
+      if (base::StringToInt(rgb[0], &r) && base::StringToInt(rgb[1], &g) &&
+          base::StringToInt(rgb[2], &b) && r >= 0 && r <= 255 && g >= 0 &&
+          g <= 255 && b >= 0 && b <= 255) {
+        SetUserColor(SkColorSetRGB(r, g, b));
+      }
+    }
+  }
+
+  if (command_line->HasSwitch(switches::kSetColorVariant)) {
+    std::string variant =
+        command_line->GetSwitchValueASCII(switches::kSetColorVariant);
+    ui::mojom::BrowserColorVariant color_variant;
+    if (variant == "tonal_spot") {
+      color_variant = ui::mojom::BrowserColorVariant::kTonalSpot;
+    } else if (variant == "neutral") {
+      color_variant = ui::mojom::BrowserColorVariant::kNeutral;
+    } else if (variant == "vibrant") {
+      color_variant = ui::mojom::BrowserColorVariant::kVibrant;
+    } else if (variant == "expressive") {
+      color_variant = ui::mojom::BrowserColorVariant::kExpressive;
+    } else {
+      return;
+    }
+    SetBrowserColorVariant(color_variant);
+  }
+}
 void ThemeService::ResetThemeSyncableServiceForTest() {
   theme_syncable_service_.reset();
 }
diff --git a/chrome/browser/themes/theme_service.h b/chrome/browser/themes/theme_service.h
index 1743695606..4c9e0e6df2 100644
--- a/chrome/browser/themes/theme_service.h
+++ b/chrome/browser/themes/theme_service.h
@@ -8,6 +8,7 @@
 #include <memory>
 #include <string>
 
+#include "base/command_line.h"
 #include "base/memory/raw_ptr.h"
 #include "base/memory/raw_ref.h"
 #include "base/memory/ref_counted.h"
@@ -251,6 +252,9 @@ class ThemeService : public KeyedService,
   // Don't create "Cached Theme.pak" in the extension directory, for testing.
   static void DisableThemePackForTesting();
 
+
+  // Processes theme-related command-line switches.
+  void ProcessThemeCommandLineSwitches(const base::CommandLine* command_line);
   void ResetThemeSyncableServiceForTest();
 
  protected:
diff --git a/chrome/browser/themes/theme_service_unittest.cc b/chrome/browser/themes/theme_service_unittest.cc
index ed3a776710..f1771cc02b 100644
--- a/chrome/browser/themes/theme_service_unittest.cc
+++ b/chrome/browser/themes/theme_service_unittest.cc
@@ -6,6 +6,7 @@
 
 #include <cmath>
 #include <memory>
+#include "base/command_line.h"
 
 #include "base/compiler_specific.h"
 #include "base/containers/fixed_flat_map.h"
@@ -1061,4 +1062,229 @@ TEST_F(ThemeServiceTest, ReinstallerRecoversDefaultTheme) {
             ui::mojom::BrowserColorVariant::kSystem);
 }
 
+
+class ThemeServiceCommandLineTest : public ThemeServiceTest {
+ public:
+  void SetUp() override {
+    ThemeServiceTest::SetUp();
+    command_line_ =
+        std::make_unique<base::CommandLine>(base::CommandLine::NO_PROGRAM);
+  }
+
+ protected:
+  std::unique_ptr<base::CommandLine> command_line_;
+};
+
+TEST_F(ThemeServiceCommandLineTest, ProcessThemeColorSwitch) {
+  command_line_->AppendSwitchASCII(switches::kSetThemeColor, "255,128,0");
+
+  EXPECT_TRUE(theme_service_->UsingDefaultTheme());
+  EXPECT_FALSE(theme_service_->UsingAutogeneratedTheme());
+
+  theme_service_->ProcessThemeCommandLineSwitches(command_line_.get());
+
+  EXPECT_FALSE(theme_service_->UsingDefaultTheme());
+  EXPECT_TRUE(theme_service_->UsingAutogeneratedTheme());
+  EXPECT_EQ(ThemeService::kAutogeneratedThemeID, theme_service_->GetThemeID());
+  EXPECT_EQ(SkColorSetRGB(255, 128, 0),
+            theme_service_->GetAutogeneratedThemeColor());
+}
+
+TEST_F(ThemeServiceCommandLineTest, ProcessThemeColorSwitchInvalidFormat) {
+  command_line_->AppendSwitchASCII(switches::kSetThemeColor, "invalid");
+
+  EXPECT_TRUE(theme_service_->UsingDefaultTheme());
+
+  theme_service_->ProcessThemeCommandLineSwitches(command_line_.get());
+
+  EXPECT_TRUE(theme_service_->UsingDefaultTheme());
+  EXPECT_FALSE(theme_service_->UsingAutogeneratedTheme());
+}
+
+TEST_F(ThemeServiceCommandLineTest, ProcessColorSchemeSwitch) {
+  command_line_->AppendSwitchASCII(switches::kSetColorScheme, "dark");
+
+  EXPECT_EQ(ThemeService::BrowserColorScheme::kSystem,
+            theme_service_->GetBrowserColorScheme());
+
+  theme_service_->ProcessThemeCommandLineSwitches(command_line_.get());
+
+  EXPECT_EQ(ThemeService::BrowserColorScheme::kDark,
+            theme_service_->GetBrowserColorScheme());
+}
+
+TEST_F(ThemeServiceCommandLineTest, ProcessColorSchemeSwitchLight) {
+  command_line_->AppendSwitchASCII(switches::kSetColorScheme, "light");
+
+  theme_service_->ProcessThemeCommandLineSwitches(command_line_.get());
+
+  EXPECT_EQ(ThemeService::BrowserColorScheme::kLight,
+            theme_service_->GetBrowserColorScheme());
+}
+
+TEST_F(ThemeServiceCommandLineTest, ProcessColorSchemeSwitchSystem) {
+  theme_service_->SetBrowserColorScheme(
+      ThemeService::BrowserColorScheme::kDark);
+  EXPECT_EQ(ThemeService::BrowserColorScheme::kDark,
+            theme_service_->GetBrowserColorScheme());
+
+  command_line_->AppendSwitchASCII(switches::kSetColorScheme, "system");
+
+  theme_service_->ProcessThemeCommandLineSwitches(command_line_.get());
+
+  EXPECT_EQ(ThemeService::BrowserColorScheme::kSystem,
+            theme_service_->GetBrowserColorScheme());
+}
+
+TEST_F(ThemeServiceCommandLineTest, ProcessDefaultThemeSwitch) {
+  theme_service_->BuildAutogeneratedThemeFromColor(SK_ColorBLUE);
+  EXPECT_TRUE(theme_service_->UsingAutogeneratedTheme());
+
+  command_line_->AppendSwitch(switches::kSetDefaultTheme);
+
+  theme_service_->ProcessThemeCommandLineSwitches(command_line_.get());
+
+  EXPECT_TRUE(theme_service_->UsingDefaultTheme());
+  EXPECT_FALSE(theme_service_->UsingAutogeneratedTheme());
+}
+
+TEST_F(ThemeServiceCommandLineTest, ProcessGrayscaleSwitch) {
+  command_line_->AppendSwitchASCII(switches::kSetGrayscaleTheme, "true");
+
+  EXPECT_FALSE(theme_service_->GetIsGrayscale());
+
+  theme_service_->ProcessThemeCommandLineSwitches(command_line_.get());
+
+  EXPECT_TRUE(theme_service_->GetIsGrayscale());
+}
+
+TEST_F(ThemeServiceCommandLineTest, ProcessGrayscaleSwitchFalse) {
+  theme_service_->SetIsGrayscale(true);
+  EXPECT_TRUE(theme_service_->GetIsGrayscale());
+
+  command_line_->AppendSwitchASCII(switches::kSetGrayscaleTheme, "false");
+
+  theme_service_->ProcessThemeCommandLineSwitches(command_line_.get());
+
+  EXPECT_FALSE(theme_service_->GetIsGrayscale());
+}
+
+TEST_F(ThemeServiceCommandLineTest, ProcessUserColorSwitch) {
+  command_line_->AppendSwitchASCII(switches::kSetUserColor, "0,255,128");
+
+  EXPECT_EQ(std::nullopt, theme_service_->GetUserColor());
+
+  theme_service_->ProcessThemeCommandLineSwitches(command_line_.get());
+
+  EXPECT_EQ(SkColorSetRGB(0, 255, 128), theme_service_->GetUserColor());
+  EXPECT_EQ(ThemeService::kUserColorThemeID, theme_service_->GetThemeID());
+}
+
+TEST_F(ThemeServiceCommandLineTest, ProcessColorVariantSwitch) {
+  command_line_->AppendSwitchASCII(switches::kSetColorVariant, "tonal_spot");
+
+  EXPECT_EQ(ui::mojom::BrowserColorVariant::kSystem,
+            theme_service_->GetBrowserColorVariant());
+
+  theme_service_->ProcessThemeCommandLineSwitches(command_line_.get());
+
+  EXPECT_EQ(ui::mojom::BrowserColorVariant::kTonalSpot,
+            theme_service_->GetBrowserColorVariant());
+}
+
+TEST_F(ThemeServiceCommandLineTest, ProcessColorVariantSwitchNeutral) {
+  command_line_->AppendSwitchASCII(switches::kSetColorVariant, "neutral");
+
+  theme_service_->ProcessThemeCommandLineSwitches(command_line_.get());
+
+  EXPECT_EQ(ui::mojom::BrowserColorVariant::kNeutral,
+            theme_service_->GetBrowserColorVariant());
+}
+
+TEST_F(ThemeServiceCommandLineTest, ProcessColorVariantSwitchVibrant) {
+  command_line_->AppendSwitchASCII(switches::kSetColorVariant, "vibrant");
+
+  theme_service_->ProcessThemeCommandLineSwitches(command_line_.get());
+
+  EXPECT_EQ(ui::mojom::BrowserColorVariant::kVibrant,
+            theme_service_->GetBrowserColorVariant());
+}
+
+TEST_F(ThemeServiceCommandLineTest, ProcessColorVariantSwitchExpressive) {
+  command_line_->AppendSwitchASCII(switches::kSetColorVariant, "expressive");
+
+  theme_service_->ProcessThemeCommandLineSwitches(command_line_.get());
+
+  EXPECT_EQ(ui::mojom::BrowserColorVariant::kExpressive,
+            theme_service_->GetBrowserColorVariant());
+}
+
+TEST_F(ThemeServiceCommandLineTest, ProcessMultipleSwitches) {
+  command_line_->AppendSwitchASCII(switches::kSetThemeColor, "100,150,200");
+  command_line_->AppendSwitchASCII(switches::kSetColorScheme, "dark");
+  command_line_->AppendSwitchASCII(switches::kSetGrayscaleTheme, "false");
+
+  theme_service_->ProcessThemeCommandLineSwitches(command_line_.get());
+
+  EXPECT_TRUE(theme_service_->UsingAutogeneratedTheme());
+  EXPECT_EQ(SkColorSetRGB(100, 150, 200),
+            theme_service_->GetAutogeneratedThemeColor());
+  EXPECT_EQ(ThemeService::BrowserColorScheme::kDark,
+            theme_service_->GetBrowserColorScheme());
+  EXPECT_FALSE(theme_service_->GetIsGrayscale());
+}
+
+TEST_F(ThemeServiceCommandLineTest, ProcessUserColorAndVariantTogether) {
+  command_line_->AppendSwitchASCII(switches::kSetUserColor, "255,100,50");
+  command_line_->AppendSwitchASCII(switches::kSetColorVariant, "vibrant");
+
+  theme_service_->ProcessThemeCommandLineSwitches(command_line_.get());
+
+  EXPECT_EQ(SkColorSetRGB(255, 100, 50), theme_service_->GetUserColor());
+  EXPECT_EQ(ui::mojom::BrowserColorVariant::kVibrant,
+            theme_service_->GetBrowserColorVariant());
+  EXPECT_EQ(ThemeService::kUserColorThemeID, theme_service_->GetThemeID());
+}
+
+TEST_F(ThemeServiceCommandLineTest, ProcessConflictingSwitches) {
+  command_line_->AppendSwitchASCII(switches::kSetThemeColor, "255,0,0");
+  command_line_->AppendSwitchASCII(switches::kSetUserColor, "0,255,0");
+  command_line_->AppendSwitch(switches::kSetDefaultTheme);
+
+  theme_service_->ProcessThemeCommandLineSwitches(command_line_.get());
+
+  EXPECT_TRUE(theme_service_->UsingDefaultTheme());
+  EXPECT_FALSE(theme_service_->UsingAutogeneratedTheme());
+  EXPECT_EQ(std::nullopt, theme_service_->GetUserColor());
+}
+
+TEST_F(ThemeServiceCommandLineTest, ProcessEmptyCommandLine) {
+  EXPECT_TRUE(theme_service_->UsingDefaultTheme());
+
+  theme_service_->ProcessThemeCommandLineSwitches(command_line_.get());
+
+  EXPECT_TRUE(theme_service_->UsingDefaultTheme());
+  EXPECT_FALSE(theme_service_->UsingAutogeneratedTheme());
+}
+
+TEST_F(ThemeServiceCommandLineTest, ProcessInvalidColorValues) {
+  std::vector<std::string> invalid_colors = {
+      "256,128,0", "255,256,0", "255,128", "255,128,0,50",
+      "-1,128,0",  "255,abc,0", "",        "255, 128, 0"};
+
+  for (const auto& color : invalid_colors) {
+    base::CommandLine test_cmd(base::CommandLine::NO_PROGRAM);
+    test_cmd.AppendSwitchASCII(switches::kSetThemeColor, color);
+
+    theme_service_->UseDefaultTheme();
+    EXPECT_TRUE(theme_service_->UsingDefaultTheme());
+
+    theme_service_->ProcessThemeCommandLineSwitches(&test_cmd);
+
+    if (color != "255, 128, 0") {
+      EXPECT_TRUE(theme_service_->UsingDefaultTheme())
+          << "Failed for color: " << color;
+    }
+  }
+}
 }  // namespace theme_service_internal
diff --git a/chrome/common/chrome_switches.cc b/chrome/common/chrome_switches.cc
index 89ca789ce0..e0e58cc91a 100644
--- a/chrome/common/chrome_switches.cc
+++ b/chrome/common/chrome_switches.cc
@@ -400,6 +400,29 @@ const char kInitIsolateAsForeground[] = "init-isolate-as-foreground";
 // The format is "r,g,b", where r, g, b are a numeric values from 0 to 255.
 const char kInstallAutogeneratedTheme[] = "install-autogenerated-theme";
 
+// Sets the theme color for all running Chrome windows.
+// The format is "r,g,b", where r, g, b are numeric values from 0 to 255.
+const char kSetThemeColor[] = "set-theme-color";
+
+// Sets the browser color scheme for all running Chrome windows.
+// Valid values are "system", "light", or "dark".
+const char kSetColorScheme[] = "set-color-scheme";
+
+// Resets to the default theme for all running Chrome windows.
+const char kSetDefaultTheme[] = "set-default-theme";
+
+// Enables or disables grayscale theme for all running Chrome windows.
+// Valid values are "true" or "false".
+const char kSetGrayscaleTheme[] = "set-grayscale-theme";
+
+// Sets the user color for Chrome Refresh theming.
+// The format is "r,g,b", where r, g, b are numeric values from 0 to 255.
+const char kSetUserColor[] = "set-user-color";
+
+// Sets the browser color variant preference.
+// Valid values are "tonal_spot", "neutral", "vibrant", "expressive".
+const char kSetColorVariant[] = "set-color-variant";
+
 // Forces immediate platform policy refresh (not cloud policy) when Chrome is
 // already running. The switch prevents a new browser window from opening and
 // only triggers the policy refresh. Useful for testing and automation to avoid
diff --git a/chrome/common/chrome_switches.h b/chrome/common/chrome_switches.h
index 6b8b342180..30e248b877 100644
--- a/chrome/common/chrome_switches.h
+++ b/chrome/common/chrome_switches.h
@@ -132,6 +132,12 @@ extern const char kImportPasswords[];
 extern const char kIncognito[];
 extern const char kInitIsolateAsForeground[];
 extern const char kInstallAutogeneratedTheme[];
+extern const char kSetThemeColor[];
+extern const char kSetColorScheme[];
+extern const char kSetDefaultTheme[];
+extern const char kSetGrayscaleTheme[];
+extern const char kSetUserColor[];
+extern const char kSetColorVariant[];
 extern const char kInstallChromeApp[];
 extern const char kInstallIsolatedWebAppFromFile[];
 extern const char kInstallIsolatedWebAppFromUrl[];
